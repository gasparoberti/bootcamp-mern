clase 2


como create react app te crea un repo de git lo ideal para que no haya mas de un repo en la misma carpeta es primero crear el repo en git, vincular la carpeta vacia con el git remoto y despues de eso recien crear la app de react con el comando npx.
por ultimo hacer un commit con las cosas que agreg√≥ el nuevo proyecto.

// function App() {
//   return (
//     <div className="App">
//       Hola Mundo!
//     </div>
//   );
// }

//es lo mismo si usamos funciones comnunes (arriba) o funcion flecha (abajo)
const App = () => {
  // const mensaje = 'Hola Mundo!'
  return (
    <div className="App">
      {/* {mensaje} entre las llaves se accede el contenido de la variable */}
      {/* {mensaje + ' contenido concatenado'} se puede concatenar tambien */}

      {/* entre llaves se pueden evaluar solo cosas que se puedan renderizar (principalmente strings) pero no objetos */}

    </div>
  );
}


no crear componentes dentro de componentes porque no es una buena practica!
es mas, lo mejor es que cada componente tenga su archivo js

para pasar parametros en componentes hacemos:

const Mensaje = (props) => {
    console.log(props)
    return (
      <h1>
        {/* Hola mundo! */}
        {props.message}
      </h1>
    )
  }

  export default Mensaje

  y en el comp en el que llamamos y pasamos el parametros lo hacemos de la siguiente manera:
 <Mensaje message='Mensaje pasado por parametro'/>

 en react tengo que retornar una sola cosa siempre, para esto envuelvo todo en un div o envuelvo todo en un fragment que se hace de la siguiente manera: <> contenido </>

 para pasar parametros se puede hacer de las siguientes dos formas y es lo mismo:
 const Description = (props) => {
  return (
    <p>
      {/* Esta es la app de fullstack bootcamp */}
      {props.text}
    </p>
  )
}
o
 const Description = ({text}) => {
  return (
    <p>
      {/* Esta es la app de fullstack bootcamp */}
      {text}
    </p>
  )
}
si se pasan mas de un parametro en la segunda forma se lo hace de la siguiente manera: {color, message}

--------------------------------------------------------------------------
clase 3

un componente se renderiza cada ve que: 
    1. cambia el estado
    2. le llegan props nuevas

no se recomienda usar setInterval o ese tipo de funciones porque cada vez que se renderiza el componente se vuelve a ejecutar el setInterval

asi como existe la funcion onClick hay muchas mas como por ejemplo onDoubleClick, onDrag, etc.. buscarlas en la documentacion de react

para usar un evento en el boton puedo hacerlo de dos maneras:
<button onClick={() => {
    setContador(contador + 1)
}}
>
o

const handlClick = () => {
    setContador(contador + 1)
}

<button onClick={handlClick}
>
las dos maneras estan bien y hacen lo mismo.

es bueno tener la minima cantidad de estados (no se por que..)

LOS HOOKS NO PUEDEN IR ENTRE CONDICIONALES!

el handleClick se puede hacer de cualquiera de las siguientes formas:
const handlClick = () => {
        // setContador(contador + 1)    //aca le paso el nuevo valor
        // setContador(prevContador => prevContador + 1)    //aca le paso una funcion para calcular el nuevo valor
        setContador((prevContador) => {return (prevContador + 1)})
    }
    
para manejas mas de un estado es conveniente hacerlo por separado (forma 1) pero hay veces en las que se necesita que el estado tenga un objeto (forma 2, comentada)
import { useState } from 'react'

export const ContadorDoble = () => {
    const [left, setLeft] = useState(0)
    const [right, setRight] = useState(0)

    // const [counters, setCounters] = useState({
    //     left : 0,
    //     right : 0
    // })

    // const handleClickLeft = () => {
    //     setCounters({
    //         left : counters.left + 1,
    //         right : counters.right
    //     })
    // }
    
    // const handleClickRight = () => {
    //     setCounters({
    //         left : counters.left,
    //         right : counters.right + 1
    //     })
    // }

    return (
        <div>
            {/* {counters.left} */}
            {left}
            {/* <button onClick={handleClickLeft} */}
            <button onClick={() => setLeft(left + 1)}
            >
                Left
            </button>
            {/* <button onClick={handleClickRight} */}
            <button onClick={() => setRight(right + 1)}
            >
                Right
            </button>
            {/* {counters.right} */}
            {right}
        </div>
    )
}

